type Account @entity {
  id: ID!
  address: String! @unique @index
  evmAddress: String @unique @index 
  transfersTo: [Transfer!] @derivedFrom(field: "to")
  transfersFrom: [Transfer!] @derivedFrom(field: "from")
  tokensHeld: [TokenHolder!] @derivedFrom(field: "signer")
  contracts: [Contract!] @derivedFrom(field: "signer")
  # blockId: Int! @index # TODO FK
  # identity: JSON
  # active: Boolean! @index
  # freeBalance: BigInt!
  # lockedBalance: BigInt!
  # availableBalance: BigInt!
  # reservedBalance: BigInt!
  # vestedBalance: BigInt!
  # votingBalance: BigInt!
  # nonce: Int!
  # evmNonce: Int!
  # timestamp: DateTime!
}

type Contract @entity {
  id: ID!
  address: String! @unique @index
  extrinsicId: Int @index # TODO FK
  signer: Account
  signerAddress: String @index
  bytecode: String!
  bytecodeContext: String!
  bytecodeArguments: String!
  gasLimit: Int!
  storageLimit: Int!
  timestamp: DateTime!
}

type Transfer @entity {
  id: ID!
  blockId: Int! @index # TODO FK
  extrinsicId: Int! @index # TODO FK
  to: Account!
  from: Account!
  toAddress: String @index
  fromAddress: String @index
  tokenAddress: String @index # TODO FK
  toEvmAddress: String @index
  fromEvmAddress: String @index
  type: TransferType!
  amount: BigInt! @index
  feeAmount: BigInt! @index
  denom: String @index
  nftId: BigInt @index
  errorMessage: String
  success: Boolean! @index
  timestamp: DateTime!
  eventId: Int!
}

enum TransferType {
  Native, 
  ERC20, 
  ERC721, 
  ERC1155
}

type TokenHolder @entity @index(fields: ["tokenAddress", "signer", "nftId"], unique: true) {
  id: ID!
  tokenAddress: String! @unique @index # TODO FK
  signer: Account
  signerAddress: String @index
  evmAddress: String @index
  nftId: BigInt
  type: TokenHolderType!
  balance: BigInt! @index
  info: JSON!
  timestamp: DateTime!
}

enum TokenHolderType {
  Account, 
  Contract
}